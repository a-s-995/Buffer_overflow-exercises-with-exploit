#ifndef _PRINTER_H
#define _PRINTER_H

#include <stdio.h>
#include <time.h>

#define SCREEN_WIDTH 80
#define WINDOW_WIDTH 40

#define BESTEST_NEWEPOCH 1478563200

#define STR(S) #S
#define printf_user(text) printf("[*] %s\n", text)
#define printf_userchoice(choice, text) printf("(" STR(choice) ") %s\n", text)
#define printf_userinput(text) printf("%s\n> ", text)

//##############################################################################
// Function declarations
//##############################################################################
void set_buffering();
inline void flush_stdin_until_newline() __attribute__((always_inline));

void best_gets(char *dest);
void best_gets_v2(char *dest, int length);
void best_gets_v3(char *dest);

void print_time();
void header(char *txt);
inline void center(char *txt) __attribute__((always_inline));

int user_input_number();

//##############################################################################
// Function definitions
//##############################################################################
void set_buffering()
{
    setvbuf(stdout, NULL, _IOLBF, 1024);
    setvbuf(stdin, NULL, _IOLBF, 1024);
}

inline void flush_stdin_until_newline()
{
    while (fgetc(stdin) != '\n')
        ;
}

void best_gets(char *dest)
{
    char c = 0;
    while ((c = getc(stdin)) != '\n')
    {
        *dest++ = c;
    }
    *dest = 0;
}
void best_gets_v2(char *dest, int length)
{
    if (length < 1)
        return;
    char c = 0;
    while (--length && (c = getc(stdin)) != '\n')
    {
        *dest++ = c;
    }
    *dest = 0;
}
void best_gets_v3(char *dest)
{
    char c = 0;
    while ((c = getc(stdin)) != '\n')
    {
        *dest++ = c;
    }
    // Kind users will provide null terminators
    // *dest = 0;
}
void print_time()
{
    long epoch_min = (time(NULL) - BESTEST_NEWEPOCH) / 60;
    char buffer[WINDOW_WIDTH];
    snprintf(buffer, WINDOW_WIDTH, "%ld Minutes since the bestest time", epoch_min);
    center(buffer);
}

void header(char *txt)
{
    int len = strnlen(txt, WINDOW_WIDTH);
    int lead = (int)((WINDOW_WIDTH - len) / 2);
    int trail = (int)(WINDOW_WIDTH - len - lead);
    printf(" ______________________________________________________________________________ \n");
    printf("|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|______|\n");
    printf("|__|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|___|\n");
    printf("|_____|_____|______|                                        |_____|_____|______|\n");
    printf("|__|_____|_____|___|%*c%s%*c|__|_____|_____|___|\n", lead, ' ', txt, trail, ' ');
    printf("|_____|_____|______|________________________________________|_____|_____|______|\n");
    printf("|__|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|___|\n");
    printf("|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|______|\n");
    print_time();
    printf("\n");
}

inline void center(char *txt)
{
    printf("%*c%s\n", (int)((SCREEN_WIDTH - strlen(txt)) / 2), ' ', txt);
}

int user_input_number()
{
    int error, choice, result;
    result = scanf("%d", &choice);
    if (result != 1)
    { // couldn't get the number
        choice = 0;
        error = result < 0;
        if (error)
        {
            printf("Error during scanf!");
        }
    }
    flush_stdin_until_newline();
    return choice;
}

#endif /* _PRINTER_H */