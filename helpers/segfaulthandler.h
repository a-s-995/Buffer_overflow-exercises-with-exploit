#ifndef _HANDLE_SEGFAULT_H
#define _HANDLE_SEGFAULT_H

#include <stdio.h>
#include <stdint.h>
#include <signal.h>
#include <ucontext.h>

#define REG_RIP 0
#define REG_RSP 1

static void sig_handler(int sig, siginfo_t *si, void *uctx)
{
    ucontext_t *user_ctx = (ucontext_t *)uctx;
    uint8_t *RIP = (uint8_t *)user_ctx->uc_mcontext.gregs[REG_RIP];
    uint8_t *RSP = (uint8_t *)user_ctx->uc_mcontext.gregs[REG_RSP];
    puts("OOPS!!! You just witnessed the best segmentation fault.");
    puts("Notify the developers if you also want to see the best fix.");
    printf("Also, send them the secret code: RIP = %p; RSP = %p; SFAddr = %p\n", RIP, RSP, si->si_addr);
    puts("Believe me, they'll know what it means.");
    exit(1);
}

static void register_segfault_handler()
{
    struct sigaction sa;
    sa.sa_flags = SA_SIGINFO;
    sigemptyset(&sa.sa_mask);
    sa.sa_sigaction = sig_handler;
    if (sigaction(SIGSEGV, &sa, NULL) == -1)
        printf("ERROR: SIGSEGV can't be caught\n");
}

#endif /* _HANDLE_SEGFAULT_H*/